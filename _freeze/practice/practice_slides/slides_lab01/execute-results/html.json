{
  "hash": "4114377bd0aa319ef3e5dd30573a3e03",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1: Intro to R and data analysis\"\nsubtitle: \"<span style='font-size:2em;'> Practice session covering topics discussed in Lecture 1 </span>\"\nauthor: \"<a href='https://r4biostats.com/me.html' style='color:#72aed8;font-weight:600;'>M. Chiara Mimmi, Ph.D.</a>&ensp;|&ensp;Universit√† degli Studi di Pavia\"\ndate: 2024-07-24\ndate-format: long\ncode-link: true\nformat:\n  revealjs:\n    smaller: true\n    scrollable: true\n    theme: ../../theme/slidesMine.scss # QUARTO LOOKS IN SAME FOLDER \n#    logo: imgs_slides/mitgest_logo.png\n    footer: '[R 4 Biostatistics](https://r4biostats.com/) | MITGEST::training(2024)'\n#    footer: <https://lulliter.github.io/R4biostats/lectures.html>\n## ------------- x salvare come PDF \n    standalone: false\n    ## -------Produce a standalone HTML file with no external dependencies,\n    embed-resources: true\n    transition: fade\n    background-transition: fade\n    highlight-style: ayu-mirage\n    slide-number: true\n    fig-cap-location: top\n    # fig-format: svg\n    pdf-separate-fragments: false\n    # fig-align: center\nexecute:\n  # Quarto pre code blocks do not echo their source code by default\n  echo: true\n  include: true\n  freeze: auto\n---\n\n\n## GOAL OF TODAY'S PRACTICE SESSION\n\n::: {.hand .large}\n[Motivate the choice of learning/using R for scientific quantitative analysis, and lay out some fundamental concepts in biostatistics with concrete R coding examples.]{style=\"color:#77501a\"}\n:::\n\n::: {style=\"font-size: 85%;\"}\n\n**Lecture 1: topics**\n\n-   **Introduction to R and R-studio**\n    -   Why R?\n    -   Principles of reproducible analysis with R + RStudio\n-   **R objects, functions, packages**\n-   **Understanding different types of variables**\n    -   Principles of \"tidy data\"\n-   **Descriptive statistics**\n    -   Measures of central tendency, measures of variability (or spread), and frequency distribution\n-   **Visual data exploration**\n    -   {`ggplot2`}\n\n:::    \n<!-- -   Foundations of inference -->\n\n# INTRO TO R AND RSTUDIO\n\n## R version\nIf you have previously installed R on your machine, you can check which version you are running by executing this command in `R`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check your R version\nR.Version()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$platform\n[1] \"x86_64-apple-darwin17.0\"\n\n$arch\n[1] \"x86_64\"\n\n$os\n[1] \"darwin17.0\"\n\n$system\n[1] \"x86_64, darwin17.0\"\n\n$status\n[1] \"\"\n\n$major\n[1] \"4\"\n\n$minor\n[1] \"2.2\"\n\n$year\n[1] \"2022\"\n\n$month\n[1] \"10\"\n\n$day\n[1] \"31\"\n\n$`svn rev`\n[1] \"83211\"\n\n$language\n[1] \"R\"\n\n$version.string\n[1] \"R version 4.2.2 (2022-10-31)\"\n\n$nickname\n[1] \"Innocent and Trusting\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# or just\n#R.version.string\n```\n:::\n\n\n## Install {{< fa brands r-project >}}\n\n<!-- `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M0 93.7l183.6-25.3v177.4H0V93.7zm0 324.6l183.6 25.3V268.4H0v149.9zm203.8 28L448 480V268.4H203.8v177.9zm0-380.6v180.1H448V32L203.8 65.7z\"/></svg>`{=html} -->\n\n<!-- `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M220.8 123.3c1 .5 1.8 1.7 3 1.7 1.1 0 2.8-.4 2.9-1.5.2-1.4-1.9-2.3-3.2-2.9-1.7-.7-3.9-1-5.5-.1-.4.2-.8.7-.6 1.1.3 1.3 2.3 1.1 3.4 1.7zm-21.9 1.7c1.2 0 2-1.2 3-1.7 1.1-.6 3.1-.4 3.5-1.6.2-.4-.2-.9-.6-1.1-1.6-.9-3.8-.6-5.5.1-1.3.6-3.4 1.5-3.2 2.9.1 1 1.8 1.5 2.8 1.4zM420 403.8c-3.6-4-5.3-11.6-7.2-19.7-1.8-8.1-3.9-16.8-10.5-22.4-1.3-1.1-2.6-2.1-4-2.9-1.3-.8-2.7-1.5-4.1-2 9.2-27.3 5.6-54.5-3.7-79.1-11.4-30.1-31.3-56.4-46.5-74.4-17.1-21.5-33.7-41.9-33.4-72C311.1 85.4 315.7.1 234.8 0 132.4-.2 158 103.4 156.9 135.2c-1.7 23.4-6.4 41.8-22.5 64.7-18.9 22.5-45.5 58.8-58.1 96.7-6 17.9-8.8 36.1-6.2 53.3-6.5 5.8-11.4 14.7-16.6 20.2-4.2 4.3-10.3 5.9-17 8.3s-14 6-18.5 14.5c-2.1 3.9-2.8 8.1-2.8 12.4 0 3.9.6 7.9 1.2 11.8 1.2 8.1 2.5 15.7.8 20.8-5.2 14.4-5.9 24.4-2.2 31.7 3.8 7.3 11.4 10.5 20.1 12.3 17.3 3.6 40.8 2.7 59.3 12.5 19.8 10.4 39.9 14.1 55.9 10.4 11.6-2.6 21.1-9.6 25.9-20.2 12.5-.1 26.3-5.4 48.3-6.6 14.9-1.2 33.6 5.3 55.1 4.1.6 2.3 1.4 4.6 2.5 6.7v.1c8.3 16.7 23.8 24.3 40.3 23 16.6-1.3 34.1-11 48.3-27.9 13.6-16.4 36-23.2 50.9-32.2 7.4-4.5 13.4-10.1 13.9-18.3.4-8.2-4.4-17.3-15.5-29.7zM223.7 87.3c9.8-22.2 34.2-21.8 44-.4 6.5 14.2 3.6 30.9-4.3 40.4-1.6-.8-5.9-2.6-12.6-4.9 1.1-1.2 3.1-2.7 3.9-4.6 4.8-11.8-.2-27-9.1-27.3-7.3-.5-13.9 10.8-11.8 23-4.1-2-9.4-3.5-13-4.4-1-6.9-.3-14.6 2.9-21.8zM183 75.8c10.1 0 20.8 14.2 19.1 33.5-3.5 1-7.1 2.5-10.2 4.6 1.2-8.9-3.3-20.1-9.6-19.6-8.4.7-9.8 21.2-1.8 28.1 1 .8 1.9-.2-5.9 5.5-15.6-14.6-10.5-52.1 8.4-52.1zm-13.6 60.7c6.2-4.6 13.6-10 14.1-10.5 4.7-4.4 13.5-14.2 27.9-14.2 7.1 0 15.6 2.3 25.9 8.9 6.3 4.1 11.3 4.4 22.6 9.3 8.4 3.5 13.7 9.7 10.5 18.2-2.6 7.1-11 14.4-22.7 18.1-11.1 3.6-19.8 16-38.2 14.9-3.9-.2-7-1-9.6-2.1-8-3.5-12.2-10.4-20-15-8.6-4.8-13.2-10.4-14.7-15.3-1.4-4.9 0-9 4.2-12.3zm3.3 334c-2.7 35.1-43.9 34.4-75.3 18-29.9-15.8-68.6-6.5-76.5-21.9-2.4-4.7-2.4-12.7 2.6-26.4v-.2c2.4-7.6.6-16-.6-23.9-1.2-7.8-1.8-15 .9-20 3.5-6.7 8.5-9.1 14.8-11.3 10.3-3.7 11.8-3.4 19.6-9.9 5.5-5.7 9.5-12.9 14.3-18 5.1-5.5 10-8.1 17.7-6.9 8.1 1.2 15.1 6.8 21.9 16l19.6 35.6c9.5 19.9 43.1 48.4 41 68.9zm-1.4-25.9c-4.1-6.6-9.6-13.6-14.4-19.6 7.1 0 14.2-2.2 16.7-8.9 2.3-6.2 0-14.9-7.4-24.9-13.5-18.2-38.3-32.5-38.3-32.5-13.5-8.4-21.1-18.7-24.6-29.9s-3-23.3-.3-35.2c5.2-22.9 18.6-45.2 27.2-59.2 2.3-1.7.8 3.2-8.7 20.8-8.5 16.1-24.4 53.3-2.6 82.4.6-20.7 5.5-41.8 13.8-61.5 12-27.4 37.3-74.9 39.3-112.7 1.1.8 4.6 3.2 6.2 4.1 4.6 2.7 8.1 6.7 12.6 10.3 12.4 10 28.5 9.2 42.4 1.2 6.2-3.5 11.2-7.5 15.9-9 9.9-3.1 17.8-8.6 22.3-15 7.7 30.4 25.7 74.3 37.2 95.7 6.1 11.4 18.3 35.5 23.6 64.6 3.3-.1 7 .4 10.9 1.4 13.8-35.7-11.7-74.2-23.3-84.9-4.7-4.6-4.9-6.6-2.6-6.5 12.6 11.2 29.2 33.7 35.2 59 2.8 11.6 3.3 23.7.4 35.7 16.4 6.8 35.9 17.9 30.7 34.8-2.2-.1-3.2 0-4.2 0 3.2-10.1-3.9-17.6-22.8-26.1-19.6-8.6-36-8.6-38.3 12.5-12.1 4.2-18.3 14.7-21.4 27.3-2.8 11.2-3.6 24.7-4.4 39.9-.5 7.7-3.6 18-6.8 29-32.1 22.9-76.7 32.9-114.3 7.2zm257.4-11.5c-.9 16.8-41.2 19.9-63.2 46.5-13.2 15.7-29.4 24.4-43.6 25.5s-26.5-4.8-33.7-19.3c-4.7-11.1-2.4-23.1 1.1-36.3 3.7-14.2 9.2-28.8 9.9-40.6.8-15.2 1.7-28.5 4.2-38.7 2.6-10.3 6.6-17.2 13.7-21.1.3-.2.7-.3 1-.5.8 13.2 7.3 26.6 18.8 29.5 12.6 3.3 30.7-7.5 38.4-16.3 9-.3 15.7-.9 22.6 5.1 9.9 8.5 7.1 30.3 17.1 41.6 10.6 11.6 14 19.5 13.7 24.6zM173.3 148.7c2 1.9 4.7 4.5 8 7.1 6.6 5.2 15.8 10.6 27.3 10.6 11.6 0 22.5-5.9 31.8-10.8 4.9-2.6 10.9-7 14.8-10.4s5.9-6.3 3.1-6.6-2.6 2.6-6 5.1c-4.4 3.2-9.7 7.4-13.9 9.8-7.4 4.2-19.5 10.2-29.9 10.2s-18.7-4.8-24.9-9.7c-3.1-2.5-5.7-5-7.7-6.9-1.5-1.4-1.9-4.6-4.3-4.9-1.4-.1-1.8 3.7 1.7 6.5z\"/></svg>`{=html} -->\n\n<!-- `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M318.7 268.7c-.2-36.7 16.4-64.4 50-84.8-18.8-26.9-47.2-41.7-84.7-44.6-35.5-2.8-74.3 20.7-88.5 20.7-15 0-49.4-19.7-76.4-19.7C63.3 141.2 4 184.8 4 273.5q0 39.3 14.4 81.2c12.8 36.7 59 126.7 107.2 125.2 25.2-.6 43-17.9 75.8-17.9 31.8 0 48.3 17.9 76.4 17.9 48.6-.7 90.4-82.5 102.6-119.3-65.2-30.7-61.7-90-61.7-91.9zm-56.6-164.2c27.3-32.4 24.8-61.9 24-72.5-24.1 1.4-52 16.4-67.9 34.9-17.5 19.8-27.8 44.3-25.6 71.9 26.1 2 49.9-11.4 69.5-34.3z\"/></svg>`{=html} -->\n\n**R** is available for free for Windows [{{< fa brands windows >}}]{style=\"color:#d8717b\"}, GNU/Linux [{{< fa brands linux >}}]{style=\"color:#d8717b\"}, and macOS [{{< fa brands apple >}}]{style=\"color:#d8717b\"}.\n\n-   To install **R**, go to this link [**https://cloud.r-project.org/**](https://cloud.r-project.org/). The latest available release is **R 4.3.3 \"Angel Food Cake\" released on 2024-02/29**, but any (fairly recent) version will do.\n\n## Install RStudio IDE\n\n**RStudio Desktop** is an Integrated Development Editor (IDE), basically a graphical interface wrapping and interfacing R (which needs to be installed first).\n\nBesides RStudio, R (which is a command line driven program) can be executed:\n\n+ via its native interface (**R GUI**)\n+ from many other code editors, like **VS Code**, **Sublime Text**, **Jupyter Notebook** \n\n<br><br>\n\nTo install **RStudio**, go to this link [**https://posit.co/download/rstudio-desktop/**](https://posit.co/download/rstudio-desktop/). The free-version contains everything you need.\n\n## Use RStudio IDE\n\n![RStudio Pane Layout [Source: Posit's RStudio User Guide](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)](../../images/rstudio-panes-labeled.jpeg)\n\n## Creating an R Project \\[in Rstudio\\]\nAn **R Project** will keep all the files associated with a project (including invisible ones!) organized together -- input data, R scripts, analytical results, figures. Besides being common practice, this has the advantage of implicitly setting the \"working directory\", which is incredibly important when you need to load or output files, specifying their file path.\n\nIn @fig-Rproj_cre you can see how easy it is just following RStudio prompts:\n\n-   Create a new directory for each project\n-   Select parent folder\n\n\n# R ENVIRONMENT SET UP & DATA \n\n## [Creating an R Project \\[in Rstudio\\] (cont.)]{.r-fit-text}\n\n![Creating an R project](../../images/RProj_new_proj.png){#fig-Rproj_cre}\n\n::: {.notes}\nNotice that, now, in the `Files` tab you see file with the extension `.Rproj` which is telling R that all folder's files belong together.\n::: \n\n## Install R packages from CRAN (stable version)\nAn **R  package* ** is a shareable bundle of functions. Besides the basic built-in functions already contained in the program (i.e. the `base`, `stats`, `utils` packages), many useful R functions come in free libraries of code (or *packages*) written by R's users. You can find them in different repositories:\n\nTo install a package use `utils` function `install.packages(\"package_name)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installing (ONLY the 1st time)\nutils::install.packages('here')\n\n# OR (same)\ninstall.packages('here')\n```\n:::\n\n\n::: {.aside}\nHere you are actually using a ***function*** (`install.packages`) of a pre-installed ***package*** (`utils`) using the syntax `packagename::function_name`. This prevents any ambiguity in case of duplicate function name... also helps you see what you are using.\n:::\n\n## Install R packages RStudio pane\n\nIn alternative, you can install/update packages using the `Packages` tab on the lower right pane of RStudio.\n\n![Screenshot Install/Update pckgs from RStudio](../../images/RStudio_install_pckg_2way.png)\n\n## [Install R packages from GitHub (testing version)]{.r-fit-text}\n\nUse `install_github` from the package `devtools`.<br>\n**EXAMPLE**: let's install a little package `paint` (which colors the structure of dataset when printing).\n\n::: aside\n[After `devtools::install_github(\"MilesMcBain/paint\")`, R asks me if I want to update related packages...] \n:::  \n \n \n:::: {.columns}\n::: {.column width=\"55%\"}\n#### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installing devtools (ONLY the 1st time)\nutils::install.packages('devtools')\n\n# Installing paint from GitHub \nlibrary(devtools)\ndevtools::install_github(\"MilesMcBain/paint\")\n\n# test paint out\nlibrary(paint)\n```\n:::\n\n:::\n  \n::: {.column width=\"45%\"}\n#### Output {paint} function\n\n::: {.cell}\n\n```{.r .cell-code}\n# Structure of a data.frame \npaint::paint(mtcars)\n```\n:::\n\n\n![](../../images/paint.png)\n:::\n:::: \n \n\n## Use R Packages\n\n+ We will be using {base} & {utils} (pre-installed and pre-loaded) \n+ We will also use the packages below (specifying `package::function` for clarity).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load pckgs for this R session\nlibrary(fs)        # file/directory interactions\nlibrary(here)      # tools find your project's files, based on working directory\nlibrary(janitor)   # tools for examining and cleaning data\nlibrary(skimr)     # tools for summary statistics \nlibrary(dplyr)     # {tidyverse} tools for manipulating and summarising tidy data \nlibrary(forcats)   # {tidyverse} tool for handling factors\nlibrary(ggplot2)   # {tidyverse} tools for plotting\nlibrary(ggridges)  # alternative to plot density functions \n```\n:::\n\n\n## Help on R package/function\n\nTo inquire about a package and/or its functions, you can again write in your console `?package_name` or `??package_name` and RStudio will open up the `Help` tab in the lower right pane.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Opening Help page on package/function\n?here\n\n??here\n```\n:::\n\n\n## File paths logistics\n\nIt is never good practice to \"hard code\" the file's *absolute path*: most likely it will break your code as soon as you (or someone else) need to run it on a different computer, let alone within a different OS.\n\n<br><br>\n\nLet's look at this example code using function `readr::read_csv()` (which reads a `*.csv` data file into the R workspace)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# [NOT REPRODUCIBLE] hard coding your file path  -----------------------\n\n# File path on Mac:\ndataset <- readr::read_csv(\"/Users/testuser/R4biostats/input_data/dataset.csv\")\n# Same file path on Windows:\ndataset <- readr::read_csv(\"C:\\Users\\testuser\\R4biostats\\input_data\\dataset.csv\")\n```\n:::\n\n\nüôÑ ...it won't work on any other computer since it won't have that same file structure!\n\n\n## [(Reproducible) file paths with `here` (in Rstudio)]{.r-fit-text}\n::: {style=\"font-size: 85%;\"}\nThe [`here`](https://here.r-lib.org/) package lets you reference file paths in a **reproducible** manner (anchored on the R Project's folder as the **root**). \n\n<!-- 1. It let's you use **relative paths**, i.e. specify the file path relative to the project folder containing `project_name.Rproj`.  -->\n<!-- 2. **No more \"/\" v. \"\\\\\"** issue (where Windows and Linus/Mac OSs differ) 3. Add sub folder levels separated by **\",\"** -->\n\nWhere is my Working Directory?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here()\n```\n:::\n\n\nYou should get: **\"/Users/YourName/RProj_Dir\"** <br><br>\nNow, you can embed `here(dir,subdir)` specifications in other functions.  \nFor example, create sub-directories (for saving input data and output data) with the `fs` package \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## --- [check the function documentation]\n?fs::dir_create\n# with `here` I simply add subfolder names relative to my wd \nfs::dir_create(here(\"practice\", \"data\",\"data_input\"))\n# ...and a subfolder to put output files at the end\nfs::dir_create(here(\"practice\", \"data\",\"data_output\"))\n\n## --- [if I need to remove it (I have them already)]\nfs::dir_delete(here(\"practice\", \"data\"))\n```\n:::\n\n:::\n\n# R OBJECTS, FUNCTIONS, PACKAGES\n\n## Importing data into R workspace\n\nWe use `utils::read.csv` to load a csv file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?read.csv # to learn about function and arguments \n```\n:::\n\n\n\n# DATASETS FOR TODAY\n\n::: {style=\"font-size: 80%;\"}\nWe are using real data provided by Thabtah,Fadi. (2017). Autism Screening Adult. UCI Machine Learning Repository. [https://doi.org/10.24432/C5F019](https://doi.org/10.24432/C5F019)\n:::\n\n## Option 1: Importing from a url\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_data_url <- read.csv(\n  file = \"https://raw.githubusercontent.com/Sydney-Informatics-Hub/lessonbmc/gh-pages/_episodes_rmd/data/autism_data.csv\", \n  header = TRUE, # 1st line is the name of the variables\n  sep = \",\", # which is the field separator character.\n  na.strings = c(\"?\") # specific values R should interpret as NA\n)\n```\n:::\n\n\n## Option 2: Importing from my folder (if you previously downloaded the file)\n\n+ `here` lets me specify the complete path of the destination folder\n\n<br>\n\n::: {.callout-tip}\nMake sure to match your own folder structure the file path `here(...)`! \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check my working directory location\n# here::here()\n\n# Use `here` in specifying all the subfolders AFTER the working directory \nautism_data_file <- read.csv(\n  file = here(\"practice\", \"data_input\", \"01_datasets\", \"autism_data.csv\"), \n  header = TRUE, # 1st line is the name of the variables\n  sep = \",\", # which is the field separator character.\n  na.strings = c(\"?\"),# specific values R should interpret as NA\n  row.names = NULL) \n```\n:::\n\n\n# DATA OBSERVATION & MANIPULATION\n\n## Viewing the dataset and variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(autism_data_file)\n```\n:::\n\n\n+ Or click on the object in Environment tab (upper right pane of RStudio)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What data type is this data?\nclass(autism_data_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# What variables are included in this dataset?\nbase::colnames(autism_data_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"              \"A1_Score\"        \"A2_Score\"        \"A3_Score\"       \n [5] \"A4_Score\"        \"A5_Score\"        \"A6_Score\"        \"A7_Score\"       \n [9] \"A8_Score\"        \"A9_Score\"        \"A10_Score\"       \"age\"            \n[13] \"gender\"          \"ethnicity\"       \"jaundice\"        \"autism\"         \n[17] \"contry_of_res\"   \"used_app_before\" \"result\"          \"age_desc\"       \n[21] \"relation\"        \"Class.ASD\"      \n```\n\n\n:::\n:::\n\n\n+ Notice the variable name formatting inconsistency: `Class.ASD`\n\n## Manipulate / clean the dataframe\n\nI want consistent name formatting for variables: no \"`.`\", only \"`_`\" separator.\nSo, I use a very handy function `clean_names` from the `janitor` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_data <- janitor::clean_names(autism_data_file, \n                                     case = \"none\") \n# check change\ncolnames(autism_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"              \"A1_Score\"        \"A2_Score\"        \"A3_Score\"       \n [5] \"A4_Score\"        \"A5_Score\"        \"A6_Score\"        \"A7_Score\"       \n [9] \"A8_Score\"        \"A9_Score\"        \"A10_Score\"       \"age\"            \n[13] \"gender\"          \"ethnicity\"       \"jaundice\"        \"autism\"         \n[17] \"contry_of_res\"   \"used_app_before\" \"result\"          \"age_desc\"       \n[21] \"relation\"        \"Class_ASD\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ndim(autism_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 704  22\n```\n\n\n:::\n:::\n\n\n- By default `clean_names` renames cols into **\"snake\"** format (i.e. \"abc_xyz\")\n-   The option `case` is for capitalization preferences  \n    - `case = \"none\"` leaves the case as is, but only uses \"`_`\" separator \n\n## Isolate a variable (column)\n\nYou can use the `$` sign to extract a variable (column name)\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_data$id\nautism_data$A1_Score\nautism_data$gender\nautism_data$autism\n```\n:::\n\n\n## Add a new column\n\n(I prefer to rename the dataframe when I make changes)\n\n::: {.cell}\n\n```{.r .cell-code}\n# rename dataframe \nautism_pids <- autism_data\n```\n:::\n\n\nCreate a **new column**, using `paste` (function to concatenate strings)\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new column \nautism_pids$pids <- paste(\"PatientID_\" , autism_data$id, sep = \"\")\n```\n:::\n\n\nCheck results:\n\n::: {.cell}\n\n```{.r .cell-code}\n# check change in df structure\nbase::colnames(autism_pids)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"              \"A1_Score\"        \"A2_Score\"        \"A3_Score\"       \n [5] \"A4_Score\"        \"A5_Score\"        \"A6_Score\"        \"A7_Score\"       \n [9] \"A8_Score\"        \"A9_Score\"        \"A10_Score\"       \"age\"            \n[13] \"gender\"          \"ethnicity\"       \"jaundice\"        \"autism\"         \n[17] \"contry_of_res\"   \"used_app_before\" \"result\"          \"age_desc\"       \n[21] \"relation\"        \"Class_ASD\"       \"pids\"           \n```\n\n\n:::\n\n```{.r .cell-code}\ndim(autism_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 704  22\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(autism_pids)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 704  23\n```\n\n\n:::\n:::\n\n\n## (optional) Clean up workspace\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# what do I have in the environment? \nls() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"autism_data\"      \"autism_data_file\" \"autism_pids\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n# remove all EXCEPT for \"autism_pids\" \nrm(\"autism_data\", \"autism_data_file\", \"autism_data_url\" ) \n```\n:::\n\n\n<br><br>\n\n::: aside\n(Warning: mind that after `rm()`, you will not have these objects in your workspace anymore.)\n:::  \n \n\n\n# [Different ways to select rows &/or columns (from `base`)]{.smaller}\n\n## [Option 1 Extract cols with `$`]{.r-fit-text}\n\n+ (`head` only specifies to take the first 6 observations of the dataset)\n\n::: {.cell}\n\n```{.r .cell-code}\n# With the `$` sign I extract a variable (column name)\nhead(autism_pids$id) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids$pids)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PatientID_1\" \"PatientID_2\" \"PatientID_3\" \"PatientID_4\" \"PatientID_5\"\n[6] \"PatientID_6\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids$A1_Score)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"White-European\" \"Latino\"         \"Latino\"         \"White-European\"\n[5] NA               \"Others\"        \n```\n\n\n:::\n:::\n\n\n## [Option 2a Extract cols with `[,#col]`]{.r-fit-text}\n\n+ This is called \"indexing\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indexing to pick `[ , #col]`  \nhead(autism_pids[ ,1] )# empty rows means all \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids[ ,23])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PatientID_1\" \"PatientID_2\" \"PatientID_3\" \"PatientID_4\" \"PatientID_5\"\n[6] \"PatientID_6\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids[ ,2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids[ ,14])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"White-European\" \"Latino\"         \"Latino\"         \"White-European\"\n[5] NA               \"Others\"        \n```\n\n\n:::\n:::\n\n\n## [Option 2b Extract rows with `[#row,]`]{.r-fit-text}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indexing to pick `[#row, ]`  \nhead(autism_pids[1 , ] ) # empty cols means all \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id A1_Score A2_Score A3_Score A4_Score A5_Score A6_Score A7_Score A8_Score\n1  1        1        1        1        1        0        0        1        1\n  A9_Score A10_Score age gender      ethnicity jaundice autism contry_of_res\n1        0         0  26      f White-European       no     no United States\n  used_app_before result    age_desc relation Class_ASD        pids\n1              no      6 18 and more     Self        NO PatientID_1\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids[50,])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id A1_Score A2_Score A3_Score A4_Score A5_Score A6_Score A7_Score A8_Score\n50 50        1        1        0        0        0        1        1        1\n   A9_Score A10_Score age gender ethnicity jaundice autism contry_of_res\n50        0         1  30      f     Asian       no     no    Bangladesh\n   used_app_before result    age_desc relation Class_ASD         pids\n50              no      6 18 and more     Self        NO PatientID_50\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(autism_pids[25:26 ,])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id A1_Score A2_Score A3_Score A4_Score A5_Score A6_Score A7_Score A8_Score\n25 25        1        1        1        1        0        0        0        1\n26 26        0        1        1        0        0        0        0        1\n   A9_Score A10_Score age gender ethnicity jaundice autism contry_of_res\n25        0         0  43      m      <NA>       no     no       Lebanon\n26        0         0  24      f      <NA>      yes     no   Afghanistan\n   used_app_before result    age_desc relation Class_ASD         pids\n25              no      5 18 and more     <NA>        NO PatientID_25\n26              no      3 18 and more     <NA>        NO PatientID_26\n```\n\n\n:::\n:::\n\n\n## [Option 3 Extract rows & cols with `[#row,#col]`]{.r-fit-text}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indexing to pick `[#row, #col]`  \nautism_pids[1:3,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nautism_pids[1:3,23]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PatientID_1\" \"PatientID_2\" \"PatientID_3\"\n```\n\n\n:::\n\n```{.r .cell-code}\nautism_pids[1:3,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nautism_pids[1:3,14]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"White-European\" \"Latino\"         \"Latino\"        \n```\n\n\n:::\n:::\n\n\n# [What are the data types of the variables?]{.smaller}\n\n\n## Option 1 using `base` functions \n\n+ on the whole dataset\n\n::: {.cell}\n\n```{.r .cell-code}\n# What are the data types of the variables? ---------------------------------\nstr(autism_pids) # integer and character\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t704 obs. of  23 variables:\n $ id             : int  1 2 3 4 5 6 7 8 9 10 ...\n $ A1_Score       : int  1 1 1 1 1 1 0 1 1 1 ...\n $ A2_Score       : int  1 1 1 1 0 1 1 1 1 1 ...\n $ A3_Score       : int  1 0 0 0 0 1 0 1 0 1 ...\n $ A4_Score       : int  1 1 1 1 0 1 0 1 0 1 ...\n $ A5_Score       : int  0 0 1 0 0 1 0 0 1 0 ...\n $ A6_Score       : int  0 0 0 0 0 0 0 0 0 1 ...\n $ A7_Score       : int  1 0 1 1 0 1 0 0 0 1 ...\n $ A8_Score       : int  1 1 1 1 1 1 1 0 1 1 ...\n $ A9_Score       : int  0 0 1 0 0 1 0 1 1 1 ...\n $ A10_Score      : int  0 1 1 1 0 1 0 0 1 0 ...\n $ age            : int  26 24 27 35 40 36 17 64 29 17 ...\n $ gender         : chr  \"f\" \"m\" \"m\" \"f\" ...\n $ ethnicity      : chr  \"White-European\" \"Latino\" \"Latino\" \"White-European\" ...\n $ jaundice       : chr  \"no\" \"no\" \"yes\" \"no\" ...\n $ autism         : chr  \"no\" \"yes\" \"yes\" \"yes\" ...\n $ contry_of_res  : chr  \"United States\" \"Brazil\" \"Spain\" \"United States\" ...\n $ used_app_before: chr  \"no\" \"no\" \"no\" \"no\" ...\n $ result         : int  6 5 8 6 2 9 2 5 6 8 ...\n $ age_desc       : chr  \"18 and more\" \"18 and more\" \"18 and more\" \"18 and more\" ...\n $ relation       : chr  \"Self\" \"Self\" \"Parent\" \"Self\" ...\n $ Class_ASD      : chr  \"NO\" \"NO\" \"YES\" \"NO\" ...\n $ pids           : chr  \"PatientID_1\" \"PatientID_2\" \"PatientID_3\" \"PatientID_4\" ...\n```\n\n\n:::\n:::\n\n\n## Option 1 using `base` functions (cont.)\n\n+ on specific columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What values can the variables take? ---------------------------------\nsummary(autism_pids$pids)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Length     Class      Mode \n      704 character character \n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(autism_pids$pids)) # N unique values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 704\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(autism_pids$pids)) # N missing values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(autism_pids$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Length     Class      Mode \n      704 character character \n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(autism_pids$ethnicity)) # N unique values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(autism_pids$ethnicity)) # N missing values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 95\n```\n\n\n:::\n:::\n\n\n## Option 2 using `skimr` function `skim`\n\n+ on specific columns\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nautism_pids %>% \n  skimr::skim(pids, ethnicity) %>%\n  dplyr::select(#skim_variable, \n                skim_type, \n                complete_rate,\n                n_missing, \n                character.n_unique)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 4\n  skim_type complete_rate n_missing character.n_unique\n  <chr>             <dbl>     <int>              <int>\n1 character         1             0                704\n2 character         0.865        95                 11\n```\n\n\n:::\n:::\n\n\n## [Option 2 using `skimr` function `skim` (cont.)]{.r-fit-text}\n+ on the whole dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_pids %>% \n  skimr::skim() \n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n‚îÄ‚îÄ Variable type: character ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   skim_variable   n_missing complete_rate min max empty n_unique whitespace\n 1 gender                  0         1       1   1     0        2          0\n 2 ethnicity              95         0.865   5  15     0       11          0\n 3 jaundice                0         1       2   3     0        2          0\n 4 autism                  0         1       2   3     0        2          0\n 5 contry_of_res           0         1       4  20     0       67          0\n 6 used_app_before         0         1       2   3     0        2          0\n 7 age_desc                0         1      11  11     0        1          0\n 8 relation               95         0.865   4  24     0        5          0\n 9 Class_ASD               0         1       2   3     0        2          0\n10 pids                    0         1      11  13     0      704          0\n\n‚îÄ‚îÄ Variable type: numeric ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   skim_variable n_missing complete_rate    mean      sd p0  p25  p50  p75 p100\n 1 id                    0         1     352.    203.     1 177. 352. 528.  704\n 2 A1_Score              0         1       0.722   0.449  0   0    1    1     1\n 3 A2_Score              0         1       0.453   0.498  0   0    0    1     1\n 4 A3_Score              0         1       0.457   0.499  0   0    0    1     1\n 5 A4_Score              0         1       0.496   0.500  0   0    0    1     1\n 6 A5_Score              0         1       0.499   0.500  0   0    0    1     1\n 7 A6_Score              0         1       0.284   0.451  0   0    0    1     1\n 8 A7_Score              0         1       0.418   0.494  0   0    0    1     1\n 9 A8_Score              0         1       0.649   0.478  0   0    1    1     1\n10 A9_Score              0         1       0.324   0.468  0   0    0    1     1\n11 A10_Score             0         1       0.574   0.495  0   0    1    1     1\n12 age                   2         0.997  29.2     9.71  17  21   27   35    64\n13 result                0         1       4.88    2.50   0   3    4    7    10\n```\n\n\n:::\n:::\n\n\n\n \n\n# Recoding variables\n\n## From character to factor using `base` R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#### char 2 factor -------------------------------------------------------------\n# Say I want to treat some variables as factors\nautism_pids$gender <- as.factor(autism_pids$gender)\nautism_pids$ethnicity <- as.factor(autism_pids$ethnicity)\nautism_pids$contry_of_res <- as.factor(autism_pids$contry_of_res)\nautism_pids$relation <- as.factor(autism_pids$relation)\n\n# check \nclass(autism_pids$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids$contry_of_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids$relation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n## From character to factor using `base` R (n cols) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_pids_temp <- autism_pids # copy df for test \n\nto_factor <- c(\"gender\", \"ethnicity\", \"contry_of_res\", \"relation\") # vector of col names \nautism_pids_temp[ ,to_factor] <-  lapply(X =  autism_pids[ ,to_factor], FUN = as.factor)\n\n# check \nclass(autism_pids_temp$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids_temp$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids_temp$contry_of_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids_temp$relation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# now I have Variable type: factor\n```\n:::\n\n\n## Inspect factors levels (3 different ways)\n\n-   using `base::levels` function\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(autism_pids$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Asian\"           \"Black\"           \"Hispanic\"        \"Latino\"         \n [5] \"Middle Eastern \" \"others\"          \"Others\"          \"Pasifika\"       \n [9] \"South Asian\"     \"Turkish\"         \"White-European\" \n```\n\n\n:::\n:::\n\n\n-   using `base::table` function\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(autism_pids$ethnicity,useNA = \"ifany\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n          Asian           Black        Hispanic          Latino Middle Eastern  \n            123              43              13              20              92 \n         others          Others        Pasifika     South Asian         Turkish \n              1              30              12              36               6 \n White-European            <NA> \n            233              95 \n```\n\n\n:::\n:::\n\n\n## Inspect factors levels -- 3 different ways (cont.)\n\n-   using `janitor` function `tabyl`, which uses the \"pipe\" operator `%>%` which takes the output of a function as input of the next one\n\n::: {.cell}\n\n```{.r .cell-code}\njanitor::tabyl(autism_pids$ethnicity) %>% \n  adorn_totals() %>% \n  adorn_pct_formatting()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n autism_pids$ethnicity   n percent valid_percent\n                 Asian 123   17.5%         20.2%\n                 Black  43    6.1%          7.1%\n              Hispanic  13    1.8%          2.1%\n                Latino  20    2.8%          3.3%\n       Middle Eastern   92   13.1%         15.1%\n                others   1    0.1%          0.2%\n                Others  30    4.3%          4.9%\n              Pasifika  12    1.7%          2.0%\n           South Asian  36    5.1%          5.9%\n               Turkish   6    0.9%          1.0%\n        White-European 233   33.1%         38.3%\n                  <NA>  95   13.5%             -\n                 Total 704  100.0%        100.0%\n```\n\n\n:::\n:::\n\n\n## Identify missing values \n\nUse `is.na` to check if the 95 missing obs are the same missing for `ethnicity` and `relation`\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(autism_pids$ethnicity)) # indices of TRUE elements in vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   5  13  14  15  20  21  25  26  63  80  81  82  92 217 222 239 258 271 277\n[20] 278 286 307 316 325 338 339 340 341 342 343 344 345 346 347 348 349 350 351\n[39] 352 353 354 355 356 362 366 370 371 373 379 380 381 382 383 384 385 386 387\n[58] 388 389 391 396 400 401 402 404 424 428 429 430 433 439 454 486 506 519 528\n[77] 535 536 537 538 557 565 572 573 589 594 637 643 646 652 653 659 660 667 702\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(is.na(autism_pids$relation))  # indices of TRUE elements in vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   5  13  14  15  20  21  25  26  63  80  81  82  92 217 222 239 258 271 277\n[20] 278 286 307 316 325 338 339 340 341 342 343 344 345 346 347 348 349 350 351\n[39] 352 353 354 355 356 362 366 370 371 373 379 380 381 382 383 384 385 386 387\n[58] 388 389 391 396 400 401 402 404 424 428 429 430 433 439 454 486 506 519 528\n[77] 535 536 537 538 557 565 572 573 589 594 637 643 646 652 653 659 660 667 702\n```\n\n\n:::\n:::\n\n\n...indeed they are the same IDs!\n\n## From character to logical\nI may prefer to code a variable as logical. For example, `age_desc` may be more explicit if coded as logical.\n\n+ I create a new column `age_desc_log` \n\n::: {.cell}\n\n```{.r .cell-code}\n# observe a subset of some columns \nautism_subset <- autism_pids [1:5, c(\"gender\",\"jaundice\", \"autism\",\"age_desc\",\n                                     \"Class_ASD\",\"pids\")]\n# View(autism_subset)\n\n# recode \"age_desc\" as LOGICAL new var \"age_desc_log\"\nautism_pids$age_desc_log <- ifelse(autism_pids$age_desc == \"18 and more\", TRUE, FALSE )\nclass(autism_pids$age_desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids$age_desc_log)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n## From character to dummy [0,1]\n\nI also may need binary variables expressed as [0,1] (e.g. to incorporate nominal variables into regression analysis). Let's recode `autism`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_pids$autism_dummy <- ifelse(autism_pids$autism == 'yes', 1, 0)\nclass(autism_pids$autism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(autism_pids$autism_dummy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n## Subsetting the data for further investigation\nRecall how to view the names of columns / variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(autism_pids)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"              \"A1_Score\"        \"A2_Score\"        \"A3_Score\"       \n [5] \"A4_Score\"        \"A5_Score\"        \"A6_Score\"        \"A7_Score\"       \n [9] \"A8_Score\"        \"A9_Score\"        \"A10_Score\"       \"age\"            \n[13] \"gender\"          \"ethnicity\"       \"jaundice\"        \"autism\"         \n[17] \"contry_of_res\"   \"used_app_before\" \"result\"          \"age_desc\"       \n[21] \"relation\"        \"Class_ASD\"       \"pids\"            \"age_desc_log\"   \n[25] \"autism_dummy\"   \n```\n\n\n:::\n:::\n\n\n## using `head` or `tail` from `utils` \n+ `head` or `tail` return the first or last parts of an object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(autism_pids)   #return fist 6 obs\ntail(autism_pids)   #return last 6 obs\n```\n:::\n\n\n## using `head` or `tail` from `utils` (cont.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(autism_pids, n = 2) #return fist 2 obs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id A1_Score A2_Score A3_Score A4_Score A5_Score A6_Score A7_Score A8_Score\n1  1        1        1        1        1        0        0        1        1\n2  2        1        1        0        1        0        0        0        1\n  A9_Score A10_Score age gender      ethnicity jaundice autism contry_of_res\n1        0         0  26      f White-European       no     no United States\n2        0         1  24      m         Latino       no    yes        Brazil\n  used_app_before result    age_desc relation Class_ASD        pids\n1              no      6 18 and more     Self        NO PatientID_1\n2              no      5 18 and more     Self        NO PatientID_2\n  age_desc_log autism_dummy\n1         TRUE            0\n2         TRUE            1\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(autism_pids, n = 2) #return last 2 obs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     id A1_Score A2_Score A3_Score A4_Score A5_Score A6_Score A7_Score A8_Score\n703 703        1        0        0        1        1        0        1        0\n704 704        1        0        1        1        1        0        1        1\n    A9_Score A10_Score age gender      ethnicity jaundice autism contry_of_res\n703        1         1  35      m    South Asian       no     no      Pakistan\n704        1         1  26      f White-European       no     no        Cyprus\n    used_app_before result    age_desc relation Class_ASD          pids\n703              no      6 18 and more     Self        NO PatientID_703\n704              no      8 18 and more     Self       YES PatientID_704\n    age_desc_log autism_dummy\n703         TRUE            0\n704         TRUE            0\n```\n\n\n:::\n:::\n\n\n## Investigating a subset of observations\n\nE.g. I learned that some patients have missing `age`... how many are they?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run...\nsum(is.na(autism_pids$age)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# or \nskimr::n_missing(autism_pids$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n<br><br>\nSo, next, I want to ID those patients with missing `age`.\n\n## [New df (patients missing `age`) as SUBSET of the given df]{.r-fit-text}\n\nI want to extract only the obs (*rows*) of interest with a few useful vars (*cols*)\n\n#### Option 1) using `[]` from `base` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_age_subset <- autism_pids[is.na(autism_pids$age), \n                                  c(\"pids\", \"age\", \"autism_dummy\") ]\nmissing_age_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           pids age autism_dummy\n63 PatientID_63  NA            0\n92 PatientID_92  NA            0\n```\n\n\n:::\n:::\n\n\n## [New df (patients missing `age`) as SUBSET of the given df]{.r-fit-text}\n\nI want to extract only the obs (*rows*) of interest with a few useful vars (*cols*)\n\n#### Option 2) using `which` from `base` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_age_subset2 <- autism_pids[which(is.na(autism_pids$age)), \n                                   c(\"pids\", \"age\", \"autism_dummy\")] \nmissing_age_subset2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           pids age autism_dummy\n63 PatientID_63  NA            0\n92 PatientID_92  NA            0\n```\n\n\n:::\n:::\n\n\n## [New df (patients missing `age`) as SUBSET of the given df]{.r-fit-text}\n\nI want to extract only the obs (*rows*) of interest with a few useful vars (*cols*)\n\n#### Option 3) using `subset` from `base` \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# arguments allow me to specify rows and cols \nmissing_age_subset3 <- subset(x = autism_pids, \n                              subset = is.na(autism_pids$age), # 1 logical condition\n                              select = c(\"pids\", \"age\", \"autism_dummy\") # which cols\n                              ) \nmissing_age_subset3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           pids age autism_dummy\n63 PatientID_63  NA            0\n92 PatientID_92  NA            0\n```\n\n\n:::\n:::\n\n \n\n## [New df (filtering on 2 conditions) as SUBSET of the given df]{.r-fit-text}\n\n\n#### Option 1) using `base::subset`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creates a SUBSET based on MORE conditions (`age` and `ethnicity`)\ntwocond_base_subset <- subset(x = autism_pids, \n                       # 2 logical conditions      \n                       subset = age < 25 & contry_of_res == \"Brazil\", \n                       # pick a few cols \n                       select = c(\"pids\", \"age\", \"contry_of_res\",\n                                  \"autism_dummy\")) \n\ntwocond_base_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             pids age contry_of_res autism_dummy\n2     PatientID_2  24        Brazil            1\n54   PatientID_54  21        Brazil            1\n94   PatientID_94  19        Brazil            1\n429 PatientID_429  20        Brazil            0\n587 PatientID_587  21        Brazil            0\n588 PatientID_588  21        Brazil            0\n```\n\n\n:::\n:::\n\n\n## [New df (filtering on 2 conditions) as SUBSET of the given df]{.r-fit-text}\n\n#### Option 2) using `dplyr` (`filter` + `select`)\nSwitching to the package `dplyr` and embracing the \"pipe\" (`%>%`) operator logic, in which the filtering (rows) and selecting (columns) is done in sequence\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## here the filtering (rows) and selecting (columns) is done in sequence\ntwocond_dplyr_subset <- autism_pids %>% \n  dplyr::filter(age < 25 & contry_of_res == \"Brazil\") %>%  # which rows\n  dplyr::select (pids, age, contry_of_res, autism_dummy)   # which cols\n\ntwocond_dplyr_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           pids age contry_of_res autism_dummy\n1   PatientID_2  24        Brazil            1\n2  PatientID_54  21        Brazil            1\n3  PatientID_94  19        Brazil            1\n4 PatientID_429  20        Brazil            0\n5 PatientID_587  21        Brazil            0\n6 PatientID_588  21        Brazil            0\n```\n\n\n:::\n:::\n\n \n\n# Dealing with missing data\n\n## Input values where missing\n::: {style=\"font-size: 90%;\"} \n‚ö†Ô∏è **`WARNINGÔ∏é`: This is a very delicate & substantial step** ‚ö†Ô∏è  \n\n+ any modified/imputed data (beyond the *original collection*) can affect subsequent analysis and statistical modeling \n+ it will be necessary to document and justify whichever approach is used to deal with missing data.\n<br><br>\nLet's assume we can get the missing data by cross-checking related clinical information\n \n\n::: {.cell}\n\n```{.r .cell-code}\n# 1/2 create a new variable \nautism_pids$age_inputed <- autism_pids$age\n# 2/2 replace value (presumably taken from other source) of `aged_inputed` \n  # CONDITIONAL on `pids`\nautism_pids$age_inputed[autism_pids$pids == \"PatientID_63\"] <-  65\nautism_pids$age_inputed[autism_pids$pids == \"PatientID_92\"] <-  45\n\n# check\nskimr::n_missing(autism_pids$age) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nskimr::n_missing(autism_pids$age_inputed)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n:::\n\n <!-- [check out !!!](https://biostats-r.github.io/biostats/workingInR/050_missing_values.html) -->\n\n# DESCRIPTIVE STATISTICS\n\n## Summarizing all variables\n\nTry these 2 options:\n<br><br>\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### `base::summary`\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(autism_pids)\n```\n:::\n\n:::\n  \n::: {.column width=\"50%\"}\n### `skimr::skim`\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(autism_pids)\n```\n:::\n\n:::\n  \n::::\n\n\n\n## Notice `summary` different behavior according to the variable's type\n\nThe function's results depend on the class of the object\n\n- look at the output in case of `integer` (e.g. A1_Score)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(autism_pids$A1_Score)     # min, max quartiles, mean, median\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  1.0000  0.7216  1.0000  1.0000 \n```\n\n\n:::\n:::\n\n\n- look at the output in case of `factor` (e.g. ethnicity)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(autism_pids$ethnicity)    # counts of levels' frequency (included NA!)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Asian           Black        Hispanic          Latino Middle Eastern  \n            123              43              13              20              92 \n         others          Others        Pasifika     South Asian         Turkish \n              1              30              12              36               6 \n White-European            NA's \n            233              95 \n```\n\n\n:::\n:::\n\n\n## Notice `summary` different behavior according to the variable's type (cont.)\n\n- look at the output in case of `logical` (e.g. age_desc_log)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(autism_pids$age_desc_log) # counts of TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode    TRUE \nlogical     704 \n```\n\n\n:::\n:::\n\n\n\n## Frequency distributions with `table`\n\n-   Frequency distributions can be used for nominal, ordinal, or interval/ration variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(autism_pids$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  f   m \n337 367 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(autism_pids$age) # automatically drops missing...\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \n18 31 35 46 49 37 37 34 27 28 31 24 27 30 21 18 16 12 17 13 17 13  7 16  3 15 \n43 44 45 46 47 48 49 50 51 52 53 54 55 56 58 59 60 61 64 \n11 10  4  6  8  4  3  5  1  5  6  2  6  2  2  1  1  2  1 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(autism_pids$age, useNA = \"ifany\") #...unless specified\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n  18   31   35   46   49   37   37   34   27   28   31   24   27   30   21   18 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n  16   12   17   13   17   13    7   16    3   15   11   10    4    6    8    4 \n  49   50   51   52   53   54   55   56   58   59   60   61   64 <NA> \n   3    5    1    5    6    2    6    2    2    1    1    2    1    2 \n```\n\n\n:::\n:::\n\n\n## Cross tabulation  with `table` (2 vars)\n\n-   Cross tabulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(autism_pids$gender, autism_pids$age_inputed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n    17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\n  f  7 11 22 22 18 14 17 10 11 14 18 15 16 13  8 14  6  7 12  7 11  6  5  9  0\n  m 11 20 13 24 31 23 20 24 16 14 13  9 11 17 13  4 10  5  5  6  6  7  2  7  3\n   \n    42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 58 59 60 61 64 65\n  f  6  5  4  5  4  3  2  2  2  0  2  4  1  1  0  1  0  1  1  0  0\n  m  9  6  6  0  2  5  2  1  3  1  3  2  1  5  2  1  1  0  1  1  1\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(autism_pids$ethnicity, autism_pids$autism_dummy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 \n                    0   1\n  Asian           118   5\n  Black            38   5\n  Hispanic         12   1\n  Latino           12   8\n  Middle Eastern   83   9\n  others            1   0\n  Others           28   2\n  Pasifika         10   2\n  South Asian      34   2\n  Turkish           5   1\n  White-European  183  50\n```\n\n\n:::\n:::\n\n\n## Grouping and summarizing with `base` R\n\nE.g. I want to know the average age of men and women sub-groups.\n  \n#### Option 1) using `by`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by(data$column, data$grouping_column, mean)\nby(data = autism_pids$age_inputed, INDICES = autism_pids$gender, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nautism_pids$gender: f\n[1] 29.60237\n------------------------------------------------------------ \nautism_pids$gender: m\n[1] 28.98365\n```\n\n\n:::\n:::\n\n\n## [Grouping and summarizing with `base` R]{.r-fit-text}\n\n::: {style=\"font-size: 80%;\"}\nUsing functions from the `apply()` family (`sapply`, `lapply`, `tapply`):\n\n  + All of these functions allow us to *iterate over a data structure*, (a list, a matrix, an array, a DataFrame, etc.) and perform the same operation at each element.\n\n#### Option 2) using `tapply` \n(to apply a function to subsets of a vector where subsets are defined by some other vector, usually a factor)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# i.e. apply a function to subsets of a vector or array, split by one or more factors.\ntapply(X = autism_pids$age_inputed, INDEX = autism_pids$gender, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       f        m \n29.60237 28.98365 \n```\n\n\n:::\n:::\n\n\n\n#### Option 3) using `split` + `sapply` \n(it returns a vector)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sapply(split(data$column, data$grouping_column), mean)\nsapply(X = split(autism_pids$age_inputed, autism_pids$gender),FUN = mean) # returns a vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       f        m \n29.60237 28.98365 \n```\n\n\n:::\n:::\n\n \n:::\n\n## Grouping and summarizing with `dplyr`\n\n<!-- -   {dplyr} is a key package in the {tidyverse} collection -->\n<!-- -   it uses the \"pipe\" `%>%` and doesn't require to specify the `dataframe$col_name` but simply `col_name` -->\nUsing functions from the `dplyr()` package which *\"concatenates\"* each step\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_pids %>% \n  dplyr::group_by(gender) %>% \n  dplyr::summarise(mean(age_inputed))  # returns a dataframe!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 2\n  gender `mean(age_inputed)`\n  <fct>                <dbl>\n1 f                     29.6\n2 m                     29.0\n```\n\n\n:::\n:::\n\n\nI could add more statistics to the grouped summary...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautism_pids %>% \n  dplyr::group_by(gender) %>% \n  dplyr::summarise(mean_age = mean(age_inputed),  \n                   N_obs = n(), \n                   N_with_autism = sum(autism_dummy == 1)\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 4\n  gender mean_age N_obs N_with_autism\n  <fct>     <dbl> <int>         <int>\n1 f          29.6   337            54\n2 m          29.0   367            37\n```\n\n\n:::\n:::\n\n\n# Measures of central tendency\n\n## Mean and median\n\nRecall that: <br><br>\n\n**Population MEAN** $\\mu=\\frac{\\sum_{i=1}^n x_{i}}n$  \n**Sample MEAN** $\\bar{x}=\\frac{\\sum_{i=1}^n x_{i}}n$ \n\n<br><br>\n\n**Sample MEDIAN** \n\nFor uneven $n$: $Mdn = \\frac{x_{(n+1)}}2$ \n\nFor even $n$: $Mdn = \\frac{x_{(n/2)} + x_{(n/2+1)}}2$\n\n## Mean/Median using `base` R\n\n::: {style=\"font-size: 85%;\"}\n+ Using `age` (original variable) \n  + You must specify the argument `na.rm = TRUE` or the functions won't work!\n\n::: {.cell}\n\n```{.r .cell-code}\n## Using `age` (original variable) \nmean(autism_pids$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(autism_pids$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# specify to omit NA observations \nmean(autism_pids$age, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 29.20655\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(autism_pids$age, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27\n```\n\n\n:::\n:::\n\n\n+  Using `age_inputed` to see what inputed missing values did \n\n::: {.cell}\n\n```{.r .cell-code}\n## Using `age_inputed` to see what inputed missing values did \nmean(autism_pids$age_inputed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 29.27983\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(autism_pids$age_inputed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27\n```\n\n\n:::\n:::\n\n::: \n\n## Create custom function to calculate statistical mode 1/2\n\nR doesn't have a built-in function for the statistical **mode**, so we can create a custom one: `f_calc_mode`\n \n#### Define the custom function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_calc_mode  <- function(x) { \n  # `unique` returns a vector of unique values \n  uni_x <- unique(x)  \n  # `match` returns the index positions of 1st vector against 2nd vector\n  match_x <- match(x, uni_x)\n  # `tabulate` count the occurrences of integer values in a vector.\n  tab_x  <-  tabulate(match_x) \n  # returns element of uni_x that corresponds to max occurrences\n  uni_x[tab_x == max(tab_x)]\n}\n```\n:::\n\n\n## Create custom function to calculate statistical mode 2/2\n\n#### Call the custom function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_calc_mode(autism_pids$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n\n```{.r .cell-code}\nf_calc_mode(autism_pids$age_inputed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n\n```{.r .cell-code}\nf_calc_mode(autism_pids$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] White-European\n11 Levels: Asian Black Hispanic Latino Middle Eastern  others ... White-European\n```\n\n\n:::\n:::\n\n \n\n# Measures of variability (or spread)\n\n## Variance and Standard deviation\n\n::: {style=\"font-size: 70%;\"}\n\n\n**Population Variance** \n$$\\sigma^2 = \\frac{\\displaystyle\\sum_{i=1}^{n}(x_i - \\mu)^2} {n}$$  \n**Sample Variance** \n$$s^2 =\\frac{\\sum{(x_i-\\bar{x})^2}}{n-1}$$\n**Population Standard deviation** \n$$\\sigma = \\sqrt{\\frac{\\displaystyle\\sum_{i=1}^{n}(x_i - \\mu)^2} {n}}$$ \n**Sample Standard deviation**  \n$$s = \\sqrt\\frac{\\sum{(x_i-\\bar{x})^2}}{n-1}$$\n\n:::\n\n## Variance and Standard deviation using `base` R\n\n+ Important to specify the argument `na.rm = TRUE` or the functions won't work (or use the `age_inputed` variable)\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(autism_pids$age, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 94.28966\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(autism_pids$age_inputed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 96.19328\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(autism_pids$age, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.710286\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(autism_pids$age_inputed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.807817\n```\n\n\n:::\n:::\n\n\n# VISUAL DATA EXPLORATION\n\n## [Introducing R package `ggplot2` for graphics]{.r-fit-text}\n\n::: {style=\"font-size: 90%;\"}\n`ggplot2` provides a set of tools to map data to visual elements on a plot, to specify the kind of plot you want, and then subsequently to control the fine details of how it will be displayed. It basically allows to build a plot layer by layer (@fig-ggplot_lay).\n\n-   **data** -\\> specify what the dataset is\n-   **aesthetic mappings** (or just *aesthetics*) -\\> specify which dataset's variables will turn into the plot elements (e.g. $x$ and $y$ values, or categorical variable into colors, points, and shapes).\n-   **geom** -\\> the overall type of plot, e.g. `geom_point()` makes scatterplots, `geom_bar()` makes barplots, `geom_boxplot()` makes boxplots.\n\nAdditional (optional) pieces:\n\n-   information about the **scales**,\n-   the labels of **legends** and axes\n-   other **guides** that help people to read the plot,\n\n:::\n\n## [R package `ggplot2` for graphics (cont.)]{.r-fit-text}\na layered approach!\n\n![ggplot2 layers [Source: Mine √áetinkaya-Rundel' Data Viz class](https://vizdata.org/slides/03/03-wrangling-tidying-I.html#/todays-focus)](../../images/gglayers.png){#fig-ggplot_lay}\n\n## Save some colors (for customizing plots)\n\n+ Colors are defined in the form of **Hexadecimal color values** \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_col_palette <-  c(\"#9b2339\", \"#005ca1\")\n\ncontrast_cols_palette <- c(\"#E7B800\",\"#239b85\", \"#85239b\", \"#9b8523\",\"#23399b\",\n                \"#d8e600\", \"#0084e6\", \"#399B23\", \"#e60066\",\n                \"#00d8e6\", \"#e68000\")\n```\n:::\n\n\n# Distribution of continuous var\n\n## Histograms\n\nHistograms (and density plots) are often used to show the distribution of a continuous variable.\n\n+  Option 1) `data` inside the `ggplot()` function \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = autism_pids, mapping = aes(x=age_inputed)) + \n  geom_histogram() + \n  theme_bw()\n```\n:::\n\n\n+ Option 2) `data` before the pipe `%>%`  \n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes(x = age_inputed )) + \n  geom_histogram() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-67-1.png){width=960}\n:::\n:::\n\n\n::: aside\nnotice that after calling `ggplot()`, subsequent layers are added with `+`\n:::  \n\n## ... define bin width\n\nHistograms split the data into ranges (bins) and show the number of observations in each. Hence, it's important to pick widths that represents the data well.\n\n+ The default value is 30\n+ We can change it using the argument `bins = #`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes(x = age_inputed )) + \n  # specify to avoid warning if we fail to specify the number of bins \n  geom_histogram(bins=40) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-68-1.png){width=960}\n:::\n:::\n\n\n## ... add mean and std dev vertical lines\n\n+ using `geom_vline()` to add a vertical line for the *mean*, and the range between -1 and +1 *sd* from the mean.\n+ using `annotate()` for adding small annotations (such as text labels) \n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes(x = age_inputed )) + \n  geom_histogram(bins=40) + \n  # add mean vertical line\n  geom_vline(xintercept = mean(autism_pids$age_inputed),\n             na.rm = FALSE,\n             lwd=1,\n             color=\"#9b2339\") +\n  # add annotations with the mean value\n  annotate(\"text\",                        \n           x = mean(autism_pids$age_inputed) * 1.2, # coordinates for positioning\n           y = mean(autism_pids$age_inputed) * 2.5,\n           label = paste(\"Mean =\", round(mean(autism_pids$age_inputed), digits = 2)),\n           col = \"#9b2339\",\n           size = 4)+\n  # add also sd +1 and -1 \n  geom_vline(aes(xintercept = mean(autism_pids$age_inputed) + sd(autism_pids$age_inputed)), \n             color = \"#000000\", size = 1, linetype = \"dashed\") +\n  geom_vline(aes(xintercept = mean(autism_pids$age_inputed) - sd(autism_pids$age_inputed)), \n             color = \"#000000\", size = 1, linetype = \"dashed\") +\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-69-1.png){width=960}\n:::\n:::\n\n\n## Density plot\n\n+ specifying `x` (the continuous variable)\n+ using `geom_density()`, in which we \n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes(x = age_inputed)) +\n  geom_density()+\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-70-1.png){width=960}\n:::\n:::\n\n\n## Density plot (cont.)\n\n+ specifying shape colors with the arguments inside `geom_density(...)`\n+ `color` for the line color \n+ `fill` for area color  \n+ `alpha` to specify the degree of transparency in the density fill area\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes( x=age_inputed)) +\n  geom_density(fill=\"#85239b\", color=\"#4c4c4c\", alpha=0.5)+\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-71-1.png){width=960}\n:::\n:::\n\n\n## ... increase \\# of x-axis ticks\n\n+ specifying the amount of breaks inside `scale_x_continuous()`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes( x=age_inputed)) +\n  geom_density(fill=\"#85239b\", color=\"#4c4c4c\", alpha=0.5)+\n  theme_bw() + \n  # increase number of x axis ticks \n  scale_x_continuous(breaks = seq(10, 100,5 ), limits = c(16, 86))\n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-72-1.png){width=960}\n:::\n:::\n\n\n<!-- #theme(axis.text.x = element_text(angle = 90, size=8, vjust = 0.5, hjust=1)) -->\n\n# Distribution of continuous var split by categorical var\n\n## Histograms with `fill = category`\n\n1. indicate the categorical group as `fill = ` in the aesthetic mapping\n2. specify custom colors for each group: \n\n  + use `scale_color_manual()` for changing line color\n  + use `scale_fill_manual()` for changing area fill colors.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  # specifying `fill` = gender\n  ggplot(mapping = aes(x = age_inputed, fill = gender )) + \n  geom_histogram(bins=40) + \n  scale_fill_manual(values = c(\"#e07689\",\"#57b7ff\")) +\n  scale_color_manual(values = c(\"#9b2339\",\"#005ca1\")) +\n  theme_bw()  \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-73-1.png){width=960}\n:::\n:::\n\n\n## ... shifting bars by group\n\n+ using the specification `position = 'dodge'` inside `geom_histogram()`\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# trying to improve readability \nautism_pids %>% \n  ggplot(mapping = aes(x = age_inputed, fill = gender )) + \n  # bars next to each other with `position = 'dodge'`\n  geom_histogram(bins=40, position = 'dodge')  + \n  scale_fill_manual(values = c(\"#e07689\",\"#57b7ff\")) +\n  scale_color_manual(values = c(\"#9b2339\",\"#005ca1\")) +\n  theme_bw()  \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-74-1.png){width=960}\n:::\n:::\n\n\n## ...facet by gender\n\nThat's still not very easy to digest. Instead of only filling, you can separate the data into multiple plots to improve readability\n\n+ adding `facet_wrap()` with the  the specification of `~categ_var`\n+ also `ncol = 1` requires the subplot to be in 1 column \n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes(x = age_inputed, fill = gender )) + \n  geom_histogram(color=\"#e9ecef\", alpha=0.8, position = 'dodge') + \n  theme_bw() + \n  # splitting the gender groups, specifying `ncol` to see one above the other\n  facet_wrap(~gender, ncol = 1)  + \n  scale_fill_cyclical(values = c(\"#9b2339\",\"#005ca1\"))\n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-75-1.png){width=960}\n:::\n:::\n\n\n## ... adding 2 mean/median vert lines (by gender)\n\nI want to see the mean vertical line for each of the subgroups, but in this case, I need to create a small dataframe of summary statistics (`group_stats`).\n\nI do so by using `dplyr` add a column `mean_age` with the group mean\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ngroup_stats <- autism_pids %>% \n  dplyr::group_by(gender) %>% \n  dplyr::summarize(mean_age = mean(age_inputed),\n                   median_age = median (age_inputed)) \n\ngroup_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 3\n  gender mean_age median_age\n  <fct>     <dbl>      <dbl>\n1 f          29.6         28\n2 m          29.0         26\n```\n\n\n:::\n:::\n\n\n## [(Small digression on `tidyr::pivot_longer`)]{.r-fit-text}\n::: {style=\"font-size: 85%;\"}\nThe new small dataframe `group_stats` offers an example of **reshaping**, i.e. turning a table from a \"wide\" form (with each variable in its own column) to a \"long\" form (one column for both the *measures names* and another for both the *measures values*).\n\n+ This can be done using `tidyr::pivot_longer` function, where these arguments must be specified:\n  + `cols`: The names of the columns to pivot\n  + `names_to`: The name for the new character column\n  + `values_to`: The name for the new values column\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_stats_long <- group_stats %>% \n  tidyr::pivot_longer(cols = mean_age:median_age, \n                      names_to = \"Stat\", \n                      values_to = \"Value\") %>% \n  dplyr::mutate(label = as.character(glue::glue(\"{gender}_{Stat}\")))\n\ngroup_stats_long \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 4\n  gender Stat       Value label       \n  <fct>  <chr>      <dbl> <chr>       \n1 f      mean_age    29.6 f_mean_age  \n2 f      median_age  28   f_median_age\n3 m      mean_age    29.0 m_mean_age  \n4 m      median_age  26   m_median_age\n```\n\n\n:::\n:::\n\n\n:::\n\n## ...facet by gender + vert lines by group\n\nNotice that now the plot will have 2 `data` sources:\n\n+ `autism_pids`\n+ `group_stats_long`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  ggplot(aes(x = age_inputed, fill = gender)) + \n  # geom_histogram from dataframe 1\n  geom_histogram(bins=30,color=\"#e9ecef\", alpha=0.8, position = 'dodge') + \n  facet_wrap(~gender, ncol = 1) + \n  scale_fill_manual(values = c(\"#9b2339\",\"#005ca1\"))  +\n  # geom_vline from dataframe 2\n  geom_vline(data = group_stats_long, \n             mapping = aes(xintercept = Value, color = Stat),\n             lwd=1,\n             linetype=1) + \n  scale_color_manual(values = c( \"#f0a441\" , \"#d8cf71\")) +\n  theme_bw()  \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-78-1.png){width=960}\n:::\n:::\n\n\n## ... finishing touches\n\n+ using `labs()` and `theme()` layers\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nhist_plot <- autism_pids %>% \n  ggplot(aes(x = age_inputed, fill = gender)) + \n  # geom_histogram from dataframe 1\n  geom_histogram(bins=30,color=\"#e9ecef\", alpha=0.8, position = 'dodge') + \n  facet_wrap(~gender, ncol = 1) + \n  scale_fill_manual(values = c(\"#9b2339\",\"#005ca1\"))  +\n  # geom_vline from dataframe 2\n  geom_vline(data = group_stats_long, \n             mapping = aes(xintercept = Value, color = Stat),\n             lwd=1.5,\n             linetype=6) + \n  scale_color_manual(values = c( \"#e68000\", \"#d8cf71\")) +\n  # increase number of x axis ticks \n  scale_x_continuous(breaks = seq(10, 100,10 ), limits = c(10,70)) +\n  # Additional theme details \n  labs(x = \"age brackets\", y = \"n of individuals\",\n       color = \"Stats\",\n       title = \"Distribution of observations by gender\",\n       subtitle = \"\",\n       caption = \"Source: Thabtah,Fadi (2017) https://doi.org/10.24432/C5F019.\") +\n  theme(legend.position = \"right\",\n        plot.title = element_text(face = \"bold\")) \nhist_plot\n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-79-1.png){width=960}\n:::\n:::\n\n\n## Density `ggridges` package\n\nAs an alternative, you can use the `ggridges` package to make ridge plots. The geom `geom_density_ridges` calculates density estimates from the provided data and then plots those, using the ridgeline visualization. \nIn this case plots include a vertical median line.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nautism_pids %>% \n  # this takes also `y` = group\n  ggplot(aes(x=age_inputed, y = gender, fill = gender)) +\n  ggridges::geom_density_ridges() +\n  # I can add quantile lines (2 is the median)\n  stat_density_ridges(quantile_lines = TRUE, quantiles = c(0.5), alpha = 0.75)+  \n  # increase number of x axis ticks \n  scale_x_continuous(breaks = seq(10, 100,10 ), limits = c(16, 86)) + \n  scale_fill_cyclical(values = c(\"#9b2339\",\"#005ca1\")) + \n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-80-1.png){width=960}\n:::\n:::\n\n\n<!-- #theme(axis.text.x = element_text(angle = 90, size=8, vjust = 0.5, hjust=1)) -->\n\n<!-- # https://talks.andrewheiss.com/2021-seacen/02_data-visualization/slides/02_grammar-of-graphics.html#67 -->\n\n## Barchart\n\nBar charts provide a visual presentation of categorical data, with `geom_bar()` (height of the bar proportional to the number of cases in each group) \n\n![Difference barchart v. histogram Source: [https://www.biorender.com/](https://www.biorender.com/template/bar-chart-vs-histogram)](../../images/bar_v_hist.png){#fig-hist_bar}\n\n## Barchart (cont.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's take a variable that we recoded as `factor`\nclass(autism_pids$ethnicity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#### ... no formatting ---------------------------------- \nautism_pids %>% \n  ggplot(aes(x = ethnicity )) + \n  geom_bar() +   \n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-81-1.png){width=960}\n:::\n:::\n\n\n## ...improve theme\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"6-15\"}\nautism_pids %>% \n  ggplot(aes(x = ethnicity )) + \n  geom_bar(fill = \"steelblue\") +\n  # reference line  \n  geom_hline(yintercept=100, color = \"#9b2339\", size=0.5, ) +\n  # labels, title, etc \n  labs(x = \"ethnicity\", y = \"n of individuals\",\n       color = \"Stats\",\n       title = \"Distribution of observations by ethnicity\",\n       subtitle = \"\",\n       caption = \"Autism study\")  +\n  theme_bw() +\n  # specification son axis labels\n  theme(axis.text.x = element_text(angle=50, vjust=0.75), \n        axis.text.y = element_text(size=10,face=\"bold\"))\n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-82-1.png){width=960}\n:::\n:::\n\n\n## ...improve readability (reorder bars)\n\nReordering the bars by count using the package `forcats` and its function `fct_infreq` \n\n+ (which we can do because ethnicity was recoded as `factor`)\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nautism_pids %>% \n    # we modify our x like so \n    ggplot(aes(x = forcats::fct_infreq(ethnicity ))) + \n    geom_bar(fill = \"steelblue\") +\n    geom_hline(yintercept=100, color = \"#9b2339\", size=0.5, ) +\n    labs(x = \"ethnicity\", y = \"n of individuals\",\n         color = \"Stats\",\n         title = \"Distribution of observations by ethnicity\",\n         subtitle = \"\",\n         caption = \"Autism study\")  +\n    # --- wrap long x labels (flipped ) !!!\n    #  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 10)) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle=50, vjust=0.75), \n          axis.text.y = element_text(size=10,face=\"bold\"))  \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-83-1.png){width=960}\n:::\n:::\n\n\n## ...improve readability (highlight NA)\n\nLet's highlight the fact that the last column (`NA`) represents missing values. \n\n1. Create the `highlight` variable\n2. Map color to a variable (`fill = highlight`)\n\n## [...improve readability (highlight NA) code]{.r-fit-text}\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3,4,5,6\"}\nautism_pids %>%\n  ## --- prep the dataframe \n  dplyr::mutate(# Add a factor variable with two levels\n    highlight = forcats::fct_other(ethnicity, \n                                   keep = \"NA\", \n                                   other_level = \"All Groups\")) %>% \n  ## --- now plot \n  # In `aes mapping` we map color to a variable (`fill = highlight`)\n  ggplot(aes(x = forcats::fct_infreq(ethnicity), fill = highlight)) + \n  geom_bar()+\n  # Use custom color palettes\n  scale_fill_manual(values=c(\"#0084e6\")) +\n  # Add a line at a significant level \n  geom_hline(yintercept=100, color = \"#9b2339\", size=0.5, ) +\n  theme_bw() +\n  # make some more theme specifications  \n  labs(x = \"ethnicity\", y = \"n of individuals\",\n       color = \"Stats\",\n       title = \"Distribution of observations by ethnicity\",\n       subtitle = \"\",\n       caption = \"Autism study\")  +\n  theme(axis.text.x = element_text(angle=50, vjust=0.75), \n        axis.text.y = element_text(size=10,face=\"bold\"))  +\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-84-1.png){width=960}\n:::\n:::\n\n\n## Boxplot\n\nThe boxplot is one of the simplest ways of representing a distribution of a continuous variable and it is packed with information. It consists of two parts:\n\n+ **Box** ‚Äî Extending from the 1st to the 3rd quartile (Q1 to Q3) with a line in the middle that represents the median.\n+ **Whiskers** ‚Äî Lines extending from both ends of the box (minimum/maximum whisker values are calculated as Q1/Q3 -/+ 1.5 * IQR)\n+ Everything outside is represented as an **outlier**\n\n![Boxplot Source: [https://www.appsilon.com/post/ggplot2-boxplots](https://www.appsilon.com/post/ggplot2-boxplots)](../../images/boxplot.png){#fig-boxplot}\n\n\n## Boxplot example 1\n\nLet's use a boxplot to explore how the continuous variable `result` is distributed in the autism dataset.\n\n+ in the aesthetic mapping we specify only `x` (continuous variable)\n+ switch to vertical orientation with `coord_flip()` \n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nautism_pids %>% \n  ggplot(aes(x = result )) +\n  geom_boxplot(alpha=0.5)+\n  # switch to vertical orientation\n  coord_flip() +\n  theme_bw()    \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-85-1.png){width=960}\n:::\n:::\n\n\n\n## Boxplot example 2\n\nLet's also explore how the continuous variable `result` is distributed by the categorical variable (factor) `ethnicity`.\n\n+ in the aesthetic mapping we specify `y` (continuous variable), plus `x` and `fill` (categorical variable)\n+ make x axis labels readable with `theme(axis.text.x (...))` layer \n+ I specify colors that I had previously saved in a color palette ` contrast_cols_palette`\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"2|6-9|4\"}\nautism_pids %>% \n  ggplot(aes(x = ethnicity,  y= result, fill = ethnicity)) +\n  geom_boxplot(alpha=0.5)+\n  scale_fill_manual(values =  contrast_cols_palette)   +\n  theme_bw()+\n  # make x axis labes readable\n  theme(axis.text.x = element_text(angle=50, vjust=0.75)) +\n  # drop legend and Y-axis title\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-86-1.png){width=960}\n:::\n:::\n\n\n\n<!-- # https://datavizf23.classes.andrewheiss.com/lesson/06-lesson.html -->\n\n## Violin plot\n\nSimilarly, the violin plot is an interesting alternative to show the distribution of a continuous variable along one or more categorical variables. Here, the kernel density plot shows the smoothed curve of the **probability density function (PDF)** of the data. <br><br> \n\nCompared to the box plot, a violin plot provides more information, as it shows not only the summary statistics but also the shape and variability of the data (i.e. helping to identify any **skewness** or **multimodality** in the data).\n\n## Violin plot example\n\n+ it requires the `geom_violin` function \n+ it can be enriched by adding with other `geoms`, such as points, lines, or box plots, to create more complex and informative plots\n+ let's add points with the `geom_point` layer\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3|4\"}\nautism_pids %>% \n  ggplot(mapping = aes(y = age_inputed, x = ethnicity, fill = ethnicity)) +\n  geom_violin(alpha=0.5) +\n  geom_point(position = position_jitter(width = 0.1), size = 0.5)+ \n  scale_fill_manual(values =  contrast_cols_palette)  +\n  # make x axis labes readable\n  theme(axis.text.x = element_text(angle=50, vjust=0.75)) +\n  # drop legend and Y-axis title\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](slides_lab01_files/figure-revealjs/unnamed-chunk-87-1.png){width=960}\n:::\n:::\n\n\n# SAVING & EXPORTING OUTPUT ARTIFACTS\n\n## Saving one plot\n\nIf I want to use these output files later, I can easily save in the output folder created at the beginning.\n\n- save a plot with `ggplot2::ggsave`\n- specifying the output directory with `here::here(...)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave (hist_plot, \n        filename = here::here(\"practice\",  \"data_output\", \"hist_plot.png\"))\n```\n:::\n\n\n## Saving a `.Rds` data file.\n\n- save a dataframe with `base::saveRDS`\n- specifying the output directory with `here::here(...)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS (object = autism_pids, \n         file =  here::here(\"practice\",  \"data_output\", \"autism_pids_v2.Rds\"))\n```\n:::\n\n\n<br><br>\n\n- (later) load a saved dataframe with `base::readRDS`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# to load it later I will use \nreadRDS(here::here(\"practice\",  \"data_output\", \"autism_pids_v2.Rds\")) \n```\n:::\n\n\n::: aside\nnotice I renamed while saving: next time I load it it will be called \"autism_pids_v2\" <!-- autism_pids_v2 <- readRDS(here::here(\"practice\",  \"data_output\", \"autism_pids_v2.Rds\")) -->\n:::\n\n## Final thoughts/recommendations\n\n+ Always **read the documentation** (`?package::function`, especially the examples at the bottom)\n+ Always **inspect the data** / variables **before** and **after** making changes \n+ It is advisable to **rename** (i.e. create a new R object) when you recode/manipulate a variable or a dataset\n\n  - *this promotes reproducibility, since you(or others) will be able to retrace your coding steps*\n\n+ Always plot distributions for **visual data exploration** \n+ Make changes in **small increments** (like we saw in building `ggplot2` graph in subsequent layers)\n\n<!-- # FOUNDATIONS OF INFERENCE -->\n\n<!-- (lo lascerei x lab \\# 2) -->\n",
    "supporting": [
      "slides_lab01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}